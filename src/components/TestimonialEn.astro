---
import { Image } from "astro:assets";
import profilePic1 from "../../public/images/profile-pic/profile_pic.png";

const testimonials = [
  {
    quote: "This is the first testimonial.",
    name: "Alice",
    position: "Developer",
    imgSrc: profilePic1,
    imgAlt: "Alice profile ",
  },
  {
    quote:
      "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla placerat neque nec urna luctus pulvinar. Vestibulum finibus erat eget risus varius interdum. Maecenas id dolor molestie, porta erat at, eleifend ipsum. Donec ultrices libero ac leo egestas commodo. Sed at massa eget ante condimentum pharetra quis eget orci. Morbi tristique erat nunc, in dapibus augue vehicula placerat. Donec id sapien at est interdum feugiat feugiat quis dolor. Nam luctus vitae arcu quis facilisis. Vivamus a pulvinar nulla, in facilisis diam. Fusce eleifend velit eu tortor laoreet euismod.",
    name: "Bob",
    position: "Dev",
    imgSrc: profilePic1,
    imgAlt: "Bob profile ",
  },
  {
    quote: "This is the second testimonial.",
    name: "james",
    position: "Designer",
    imgSrc: profilePic1,
    imgAlt: "Bob profile ",
  },
];
---

<div class="carousel">
  <div class="carousel-inner">
    {
      testimonials.map((testimonial) => (
        <div class="carousel-item ">
          <svg
            class="size-8 lg:size-10 mx-auto  fill-primaryOrange/90"
            aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 18 14"
          >
            <path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z" />
          </svg>
          <blockquote>
            <p class="text-base  md:text-lg italic text-black opacity-90">
              {testimonial.quote}
            </p>
          </blockquote>
          <figure>
            <figcaption class="flex items-center justify-center mt-6 gap-x-3">
              <Image
                class="size-10 lg:size-12 rounded-full"
                src={testimonial.imgSrc}
                alt={testimonial.imgAlt}
              />
              <div class="flex items-center justify-evenly gap-2">
                <cite class=" font-medium text-base lg:text-xl">
                  {testimonial.name}
                </cite>
                <span class="text-base lg:text-xl">|</span>
                <cite class=" text-base lg:text-lg font-light">
                  {testimonial.position}
                </cite>
              </div>
            </figcaption>
          </figure>
        </div>
      ))
    }
  </div>
  <div class="carousel-indicators">
    {
      testimonials.map((_, index) => (
        <button
          class={index === 0 ? "active" : ""}
          aria-label={`Slide ${index + 1}`}
          data-slide-to={index}
        />
      ))
    }
  </div>
  <button class="carousel-control-prev" aria-label="Previous slide">❮</button>
  <button class="carousel-control-next" aria-label="Next slide">❯</button>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const carouselInner =
      document.querySelector<HTMLElement>(".carousel-inner");
    const items = document.querySelectorAll(".carousel-item");
    const indicators = document.querySelectorAll(".carousel-indicators button");
    const nextBtn = document.querySelector(".carousel-control-next");
    const prevBtn = document.querySelector(".carousel-control-prev");
    let currentIndex = 0;
    let carouselInterval;

    function updateCarousel() {
      carouselInner.style.transform = `translateX(-${currentIndex * 100}%)`;
      indicators.forEach((indicator, index) => {
        indicator.classList.toggle("active", index === currentIndex);
      });
    }

    function showItem(index) {
      currentIndex = index;
      if (currentIndex >= items.length) {
        currentIndex = 0;
      } else if (currentIndex < 0) {
        currentIndex = items.length - 1;
      }
      updateCarousel();
    }

    function showNextItem() {
      showItem(currentIndex + 1);
    }

    function showPrevItem() {
      showItem(currentIndex - 1);
    }

    function resetInterval() {
      clearInterval(carouselInterval);
      carouselInterval = setInterval(showNextItem, 5000);
    }

    nextBtn.addEventListener("click", () => {
      showNextItem();
      resetInterval();
    });

    prevBtn.addEventListener("click", () => {
      showPrevItem();
      resetInterval();
    });

    indicators.forEach((indicator, index) => {
      indicator.addEventListener("click", () => {
        showItem(index);
        resetInterval();
      });
    });
    carouselInterval = setInterval(showNextItem, 5000);
    updateCarousel();
  });
</script>

<style>
  .carousel {
    @apply relative w-full overflow-hidden;
  }

  .carousel-inner {
    @apply flex min-h-[400px] flex-row items-center transition-transform duration-500 ease-in-out;
  }
  .carousel-item {
    @apply flex w-full flex-shrink-0 flex-grow-0 flex-col items-center p-5 text-center sm:px-10 sm:py-6;
  }

  .carousel-item.active {
    @apply block;
  }

  .carousel-controls {
    @apply absolute flex w-full justify-between;
  }

  .carousel-control-prev,
  .carousel-control-next {
    @apply absolute top-1/2 cursor-pointer text-3xl text-black;
  }

  .carousel-control-prev {
    @apply left-0;
  }

  .carousel-control-next {
    @apply right-0;
  }

  .carousel-indicators {
    @apply absolute bottom-0 left-1/2 flex -translate-x-1/2 gap-x-2 text-center;
  }

  .carousel-indicators button {
    @apply size-2 cursor-pointer rounded-full border-none bg-black/15 md:size-3 lg:size-4;
  }

  .carousel-indicators button.active {
    @apply bg-black/80;
  }
</style>
