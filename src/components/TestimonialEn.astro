---
const testimonials = [
  {
    quote: "This is the first testimonial.",
    name: "Alice",
    position: "Developer",
  },
  {
    quote: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. ",
    name: "Bob",
    position: "Dev",
  },
  {
    quote: "This is the second testimonial.",
    name: "james",
    position: "Designer",
  },
  {
    quote: "This is the second testimonial.",
    name: "dan",
    position: "Designer",
  },
  {
    quote: "This is the second testimonial.",
    name: "weeel",
    position: "Designer",
  },
];
---

<div class="carousel">
  <div class="carousel-inner">
    {
      testimonials.map((testimonial) => (
        <div class="carousel-item ">
          <div class="flex flex-col items-center gap-1">
            <h6 class="text-secondaryBlueText font-bold text-xl lg:text-2xl">
              {testimonial.name}
            </h6>

            <p class=" text-base lg:text-lg font-light">
              {testimonial.position}
            </p>
          </div>
          <div class="space-y-5">
            <p class="text-base italic opacity-90">"{testimonial.quote}"</p>
            <svg
              class="size-8 lg:size-10 mx-auto  "
              aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 18 14"
            >
              <path d="M6 0H2a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3H2a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Zm10 0h-4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v1a3 3 0 0 1-3 3h-1a1 1 0 0 0 0 2h1a5.006 5.006 0 0 0 5-5V2a2 2 0 0 0-2-2Z" />
            </svg>
          </div>
        </div>
      ))
    }
  </div>

  <div class="carousel-controls">
    <button class="carousel-control-prev" aria-label="Previous slide">❮</button>
    <button class="carousel-control-next" aria-label="Next slide">❯</button>
  </div>
</div>

<style>
  .carousel {
    @apply relative w-full;
  }

  .carousel-inner {
    @apply relative flex h-120 flex-row items-center justify-evenly transition-transform duration-500 ease-in-out;
  }
  .carousel-item {
    @apply absolute flex min-h-[400px] w-full flex-shrink-0 flex-grow-0 transform flex-col items-center justify-center space-y-7 rounded-xl bg-white fill-primaryOrange/20 p-5 text-center drop-shadow-lg transition-transform ease-carousel will-change-transform md:w-96 md:transition-all md:duration-700;
  }

  .carousel-item.active {
    @apply visible z-10 translate-x-0 scale-100 bg-secondaryBlueDark fill-white/20 opacity-100 lg:scale-105;
  }

  .carousel-item p {
    @apply text-secondaryBlueText;
  }
  .carousel-item.active p,
  .carousel-item.active h6 {
    @apply text-white;
  }
  .carousel-item.left {
    @apply visible opacity-70 md:left-1/4 md:-translate-x-1/2 md:scale-90 lg:-translate-x-2/3 lg:scale-95;
  }

  .carousel-item.right {
    @apply visible opacity-70 md:right-1/4 md:translate-x-1/2 md:scale-90 lg:translate-x-2/3 lg:scale-95;
  }

  .carousel-item.behind {
    @apply invisible opacity-0;
  }

  .carousel-controls {
    @apply absolute flex w-full items-center justify-center gap-20;
  }

  .carousel-control-prev,
  .carousel-control-next {
    @apply cursor-pointer text-3xl text-secondaryBlueDark;
  }
</style>
<script defer>
  document.addEventListener("DOMContentLoaded", () => {
    const items = Array.from(document.querySelectorAll(".carousel-item"));
    const prevButton = document.querySelector(".carousel-control-prev");
    const nextButton = document.querySelector(".carousel-control-next");
    let currentIndex = 0;
    const intervalDuration = 5000;
    let intervalId;

    if (items.length === 0) {
      console.warn("No items found.");
      return;
    }

    const updateClasses = () => {
      items.forEach((item, index) => {
        item.className = "carousel-item";
      });

      const prevIndex = (currentIndex - 1 + items.length) % items.length;
      const nextIndex = (currentIndex + 1) % items.length;

      items[prevIndex].classList.add("left");
      items[nextIndex].classList.add("right");
      items[currentIndex].classList.add("active");
      items.forEach((item, index) => {
        if (
          index !== currentIndex &&
          index !== prevIndex &&
          index !== nextIndex
        ) {
          item.classList.add("behind");
        }
      });
    };

    const nextSlide = () => {
      currentIndex = (currentIndex + 1) % items.length;
      updateClasses();
    };

    const prevSlide = () => {
      currentIndex = (currentIndex - 1 + items.length) % items.length;
      updateClasses();
    };

    const resetInterval = () => {
      clearInterval(intervalId);
      intervalId = setTimeout(() => {
        intervalId = setInterval(nextSlide, intervalDuration);
      }, 500);
    };

    nextButton.addEventListener("click", () => {
      nextSlide();
      resetInterval();
    });

    prevButton.addEventListener("click", () => {
      prevSlide();
      resetInterval();
    });

    updateClasses();
    intervalId = setInterval(nextSlide, intervalDuration);
  });
</script>
